if option == 'twitter':
    for username in config.TWITTER_USERNAMES:
        user = api.get_user(username)
        tweets = api.user_timeline(username)

        st.subheader(username)
        st.image(user.profile_image_url)
        
        for tweet in tweets:
            if '$' in tweet.text:
                words = tweet.text.split(' ')
                for word in words:
                    if word.startswith('$') and word[1:].isalpha():
                        symbol = word[1:]
                        st.write(symbol)
                        st.write(tweet.text)
                        st.image(f"https://finviz.com/chart.ashx?t={symbol}")

if option == 'chart':
    symbol = st.sidebar.text_input("Symbol", value='MSFT', max_chars=None, key=None, type='default')

    data = pd.read_sql("""
        select date(day) as day, open, high, low, close
        from daily_bars
        where stock_id = (select id from stock where UPPER(symbol) = %s) 
        order by day asc""", connection, params=(symbol.upper(),))

    st.subheader(symbol.upper())

    fig = go.Figure(data=[go.Candlestick(x=data['day'],
                    open=data['open'],
                    high=data['high'],
                    low=data['low'],
                    close=data['close'],
                    name=symbol)])

    fig.update_xaxes(type='category')
    fig.update_layout(height=700)

    st.plotly_chart(fig, use_container_width=True)

    st.write(data)


if option == 'wallstreetbets':
    num_days = st.sidebar.slider('Number of days', 1, 30, 3)

    cursor.execute("""
        SELECT COUNT(*) AS num_mentions, symbol
        FROM mention JOIN stock ON stock.id = mention.stock_id
        WHERE date(dt) > current_date - interval '%s day'
        GROUP BY stock_id, symbol   
        HAVING COUNT(symbol) > 10
        ORDER BY num_mentions DESC
    """, (num_days,))

    counts = cursor.fetchall()
    for count in counts:
        st.write(count)
    
    cursor.execute("""
        SELECT symbol, message, url, dt, username
        FROM mention JOIN stock ON stock.id = mention.stock_id
        ORDER BY dt DESC
        LIMIT 100
    """)

    mentions = cursor.fetchall()
    for mention in mentions:
        st.text(mention['dt'])
        st.text(mention['symbol'])
        st.text(mention['message'])
        st.text(mention['url'])
        st.text(mention['username'])

    rows = cursor.fetchall()

    st.write(rows)


if option == 'pattern':
    pattern = st.sidebar.selectbox(
        "Which Pattern?",
        ("engulfing", "threebar")
    )

    if pattern == 'engulfing':
        cursor.execute("""
            SELECT * 
            FROM ( 
                SELECT day, open, close, stock_id, symbol, 
                LAG(close, 1) OVER ( PARTITION BY stock_id ORDER BY day ) previous_close, 
                LAG(open, 1) OVER ( PARTITION BY stock_id ORDER BY day ) previous_open 
                FROM daily_bars
                JOIN stock ON stock.id = daily_bars.stock_id
            ) a 
            WHERE previous_close < previous_open AND close > previous_open AND open < previous_close
            AND day = '2021-02-18'
        """)

    if pattern == 'threebar':
        cursor.execute("""
            SELECT * 
            FROM ( 
                SELECT day, close, volume, stock_id, symbol, 
                LAG(close, 1) OVER ( PARTITION BY stock_id ORDER BY day ) previous_close, 
                LAG(volume, 1) OVER ( PARTITION BY stock_id ORDER BY day ) previous_volume, 
                LAG(close, 2) OVER ( PARTITION BY stock_id ORDER BY day ) previous_previous_close, 
                LAG(volume, 2) OVER ( PARTITION BY stock_id ORDER BY day ) previous_previous_volume, 
                LAG(close, 3) OVER ( PARTITION BY stock_id ORDER BY day ) previous_previous_previous_close, 
                LAG(volume, 3) OVER ( PARTITION BY stock_id ORDER BY day ) previous_previous_previous_volume 
            FROM daily_bars 
            JOIN stock ON stock.id = daily_bars.stock_id) a 
            WHERE close > previous_previous_previous_close 
                AND previous_close < previous_previous_close 
                AND previous_close < previous_previous_previous_close 
                AND volume > previous_volume 
                AND previous_volume < previous_previous_volume 
                AND previous_previous_volume < previous_previous_previous_volume 
                AND day = '2021-02-19'
        """)

    rows = cursor.fetchall()

    for row in rows:
        st.image(f"https://finviz.com/chart.ashx?t={row['symbol']}")


if option == 'stocktwits':
    symbol = st.sidebar.text_input("Symbol", value='AAPL', max_chars=5)

    r = requests.get(f"https://api.stocktwits.com/api/2/streams/symbol/{symbol}.json")

    data = r.json()

    for message in data['messages']:
        st.image(message['user']['avatar_url'])
        st.write(message['user']['username'])
        st.write(message['created_at'])
        st.write(message['body'])




"""
def get_data(ticker):

    #TODO: Get peer comparison from here instead?: https://www.marketwatch.com/investing/stock/aapl
    df_zacks_balance_sheet_shares_annual, df_zacks_balance_sheet_shares_quarterly = get_zacks_balance_sheet_shares(ticker)

    df_zacks_peer_comparison = get_zacks_peer_comparison(ticker)

    df_zacks_next_earnings_release, df_zacks_earnings_surprises = get_zacks_earnings_surprises(ticker)
    df_zacks_product_line, df_zacks_geography = get_zacks_product_line_geography(ticker)
    df_finwiz_stock_data = get_finwiz_stock_data(ticker)
    df_stockrow_data = get_stockrow_stock_data(ticker, debug)

    url_yf_modules = "https://query2.finance.yahoo.com/v10/finance/quoteSummary/%s?modules=summaryProfile,financialData,summaryDetail,price,defaultKeyStatistics" % (ticker)
    json_yf_modules = json.loads(get_page(url_yf_modules).content)

    df_yf_key_statistics = get_yf_key_stats(ticker)

    df_peer_metrics = pd.DataFrame(columns=['TICKER','MARKET_CAP','EV','PE','EV_EBITDA','EV_EBIT','EV_REVENUE','PB','EBITDA_MARGIN','EBIT_MARGIN','NET_MARGIN','DIVIDEND_YIELD','ROE'])
    peer_ticker_list = []
    #Retrieve company peers metrics
    #TODO: Fix percentage metrics that do not make sense
    for row,peer in df_zacks_peer_comparison.iterrows():
        temp_row = []
        peer_ticker = peer[1]
        df_peer_zacks_stock_data = df_us_companies.loc[df_us_companies['TICKER'] == peer_ticker].reset_index(drop=True)
        if(len(df_peer_zacks_stock_data) > 0):
            peer_ticker_list.append(peer_ticker)
            peer_market_cap = df_peer_zacks_stock_data['MARKET_CAP'].values[0]

            #Calculate EV
            peer_current_assets = df_peer_zacks_stock_data['CURRENT_ASSETS(MILLION)'].values[0]
            peer_current_liabilities = df_peer_zacks_stock_data['CURRENT_LIABILITIES(MILLION)'].values[0]
            peer_long_term_debt = df_peer_zacks_stock_data['LONG_TERM_DEBT(MILLION)'].values[0]

            try:
                peer_ev = round(peer_market_cap + ((peer_current_liabilities + peer_long_term_debt) - peer_current_assets),2)            

            except ArithmeticError:
                peer_ev = 0

            peer_pe = df_peer_zacks_stock_data['PE_TTM'].values[0]

            try:
                peer_ev_ebitda = round(peer_ev/df_peer_zacks_stock_data['EBITDA_MIL'].values[0],2)
            except ArithmeticError:
                peer_ev_ebitda = 0

            try:
                peer_ev_ebit = round(peer_ev/df_peer_zacks_stock_data['EBIT_MIL'].values[0],2)
            except ArithmeticError:
                peer_ev_ebit = 0

            try:
                peer_ev_revenue = round(peer_ev/df_peer_zacks_stock_data['ANNUAL_SALES(MILLION)'].values[0],2)
            except ArithmeticError:
                peer_ev_revenue = 0

            peer_pb = df_peer_zacks_stock_data['PRICE_BOOK_RATIO'].values[0]

            try:
                peer_ebitda_margin = round(df_peer_zacks_stock_data['EBITDA_MIL'].values[0]/df_peer_zacks_stock_data['ANNUAL_SALES(MILLION)'].values[0],2) # EBITDA margin - Can be calculated using EBITDA?
            except ArithmeticError:
                peer_ebitda_margin = 0

            try:
                peer_ebit_margin = round(df_peer_zacks_stock_data['EBIT_MIL'].values[0]/df_peer_zacks_stock_data['ANNUAL_SALES(MILLION)'].values[0],2) # EBITDA margin - Can be calculated using EBITDA?
            except ArithmeticError:
                peer_ebit_margin = 0

            try:
                peer_net_margin = df_peer_zacks_stock_data['NET_MARGIN_PERCENTAGE'].values[0]/100
            except ArithmeticError:
                peer_net_margin = 0

            try:
                peer_dividend_yield = df_peer_zacks_stock_data['DIVIDEND_YIELD_PERCENTAGE'].values[0]/100
            except ArithmeticError:
                peer_dividend_yield = 0

            try:
                peer_roe = df_peer_zacks_stock_data['CURRENT_ROE_TTM'].values[0]/100
            except ArithmeticError:
                peer_dividend_yield = 0

            temp_row.append(peer_ticker)        
            temp_row.append(peer_market_cap)        
            temp_row.append(peer_ev) 
            temp_row.append(peer_pe)
            temp_row.append(peer_ev_ebitda)
            temp_row.append(peer_ev_ebit)
            temp_row.append(peer_ev_revenue)
            temp_row.append(peer_pb)
            temp_row.append(peer_ebitda_margin)
            temp_row.append(peer_ebit_margin)
            temp_row.append(peer_net_margin)
            temp_row.append(peer_dividend_yield)
            temp_row.append(peer_roe) 

        #Add row to dataframe
        if(len(temp_row) == len(df_peer_metrics.columns)):
            df_peer_metrics.loc[len(df_peer_metrics.index)] = temp_row   

    df_peer_metrics = transpose_df(df_peer_metrics)

    df_peer_metrics = df_peer_metrics.reset_index()
    df_peer_metrics = df_peer_metrics.rename(columns={"index": "METRIC"}) 
    df_peer_metrics = df_peer_metrics.rename_axis(None, axis=1)

    return df_zacks_next_earnings_release, df_zacks_earnings_surprises, df_zacks_product_line, df_zacks_geography, df_finwiz_stock_data, df_stockrow_data, json_yf_modules, df_yf_key_statistics, df_peer_metrics, df_zacks_balance_sheet_shares_annual, df_zacks_balance_sheet_shares_quarterly
"""